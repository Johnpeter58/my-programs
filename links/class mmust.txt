  public class mmust<->
  private Node head;
  private class Node{
    T data;
    Node next;
    Node (T data){
        this.data=data;
        this.next=null;
    }
  }
  public void add(T data){
    Node newnode =newnode(data);
    if (head==null){
        head=newnode;
    }
    else{
        Node current = head;
        while (current.next != null){
            current=current.next;
    }
    current.next = newnode;
    }
  }
  public void print(){
    Node current=head;
    while (current.next != null){
        system.out.print(current.data+" ");
        current=current.next;
    }
    system.out.println();
  }
  public void remove(T data){
    if(head == null){
        return;
    }
    if (head.data.equals(data)){
        head=head.next;
  }
  else{
    Node current=head;
    while(current.next != null && !current.next.data.equals(data)){
        current=current.next;
  }
  if(current.next != null){
    current.next=current.next.next;
  }
  }
  }
  public boolean contains(T data){
    Node current=head;
    while(current != null){
        if(current.data.equals(data)){
            return true;
        }
        current=current.next;
    }